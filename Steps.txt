Phase 1: Project Setup.
    Create Django Project and Core App
        We start by creating the main Django project (kioko_enterprises) and a reusable app (core) that will house shared logic like templates, base views, and utility functions.
            kioko_enterprises/ contains project settings and URLs
            core/ will serve as the foundational app for shared components
    Install Required Packages
        Install the core dependencies needed for this project:
            djangorestframework: for building RESTful APIs
            django-allauth: for email/password and Google login
            django-bootstrap5: for responsive UI components
            python-decouple: for managing environment variables securely
            psycopg2-binary: PostgreSQL adapter for Django
    Configure Environment Variables
        Create a .env file to store sensitive configuration values like database credentials and secret keys. This keeps secrets out of version control and supports reproducibility across environments.
    Update settings.py
        Modify Django settings to:
            Load environment variables using python-decouple
            Configure PostgreSQL as the database
            Register installed apps including DRF, Allauth, and Bootstrap
            Set up authentication backends for social login
    Configure Static and Media Files
        Set up paths for static assets (CSS, JS) and media files (product images, user uploads). This ensures proper handling during development and deployment.
    Create Base Template
        Create a reusable base HTML template using Bootstrap 5. This will serve as the layout foundation for all pages (homepage, product listings, cart, etc.).

Phase 2: User Management System.
    Create Custom User Model
        We’ll extend Django’s AbstractUser to include:
            Email as the unique identifier
            Role field (Admin, Staff, Customer)
            Date of birth for age verification
            Profile picture upload
    Update Settings for Custom User
        "AUTH_USER_MODEL = 'core.User'"
    Create User Registration Form
        We’ll build a custom form that includes:
            Email
            Password
            Date of birth
            Role (default: customer)
    Create Registration View
    Create Registration Template
    Configure Allauth for Google Login
        Enable Google login via Django Allauth.
        Add Google Provider
            In Django Admin:
                Add a Social App for Google
                Provide Client ID and Secret
                Associate with Site ID 1
    Password Reset via Email
        Use Django’s built-in password reset views.
    Profile Management
        Allow users to view and update:
            Personal info
            Shipping address
            Order history (placeholder for now)
        Password Reset via Email
            Enable users to:
                Request a password reset via email
                Receive a secure link to reset their password
                Complete the reset using a branded, Bootstrap-styled form
            Configure Email Backend (Development Mode)
            Add Password Reset URLs
            Create Custom Templates
Phase 3: Product Catalog.
    Define Category and Product Models
    Register Models in Admin
    Migrate Database
    Create Product List and Detail Views
    Create Templates
        product_list.html
        product_detail.html
    Add URLs
    Media File Handling
Phase 4: Cart System.
    Define Cart and CartItem Models
    Migrate Database
    Cart Utility Functions
    Cart Views
    Cart Template
        product_detail.html
    Add URLs
    Add “Add to Cart” Button
Phase 5: Checkout & Payments.
    Define Order and Payment Models
    Migrate Database
    Create Checkout Form
    Checkout View
    Checkout Template
        checkout.html
    Order Confirmation Page
        views
        template
            order_success.html
    Add URLs
    Payment Integration (Preview)
Phase 5(Sub-Continuation): Checkout Flow Validation.
    Confirm Cart Functionality.
        Add items to cart via product detail view
        View cart summary at /cart/
        Confirm quantity updates and item removal work
    Checkout Page Rendering
        Navigate to /checkout/
        Confirm form fields:
            Shipping address
            Payment method dropdown
            Submit button
    Form Submission Logic
        Submit valid data → redirect to /order-success/
        Cart clears post-submission
        Order and OrderItems saved in DB
    Admin Verification
        Log into /admin
        Confirm new Order entry with correct:
            User
            Total
            Payment method
        Confirm associated OrderItems
Phase 6: Payment Gateway Integration.
    Extend Checkout Form
    Update Checkout Template
    Create Payment Gateway Abstraction
        core/payment/gateways.py
    Route Payment Method in Checkout View
    Create Confirmation Template
    Add URL Route
    Scaffolding Mpesa Payments:
        Scaffold process_mpesa(order) Function
            core/payment/gateways.py
        Scaffold the M-Pesa Callback View & url
        Localize Confirmation Message
    Scaffolding Airtel Payments:
        Install Africa’s Talking SDK
            pip install africastalking
        Configure .env and settings.py
            .env (
                AT_USERNAME=sandbox
                AT_API_KEY=your_africastalking_api_key
            )
            settings.py (
                AT_USERNAME = config('AT_USERNAME')
                AT_API_KEY = config('AT_API_KEY')
            )
        Scaffold process_airtel() in gateways.py
        Add Callback URL
        Scaffold the view
    PayPal Integration (Raw Requests)
        Add PayPal Credentials to .env & settings.py
        Create PayPal Processor Functions
        Update Checkout View to Redirect to PayPal
        Scaffold Callback View
    Localize Confirmation Messages
    Bank Transfer Integration
        Scaffold Bank Transfer Processor
        Update Checkout View to Handle Bank Method
        Add Dispatcher Hook (if using gateway map)
    Staff-Side Bank Payment Verification Flow
        Create BankPaymentProof Model
        Add Upload Form for Users
        Add Staff Dashboard in Admin
        Scaffold Printable Receipt View
        Prep SMS Confirmation Hook (Stub)
    Payment Logging System
        Create PaymentLog Model
        Create Logging Utility
        Update Payment Processors to Log Transactions
        Add Admin Dashboard for Logs
Phase 7: Post-Payment Engagement
    Receipts & Notifications
        Add printable_receipt View
        Create Receipt Template
        Scaffold SMS Confirmation Hook
        Prep Email Confirmation Stub
    Order Tracking & Status
        Add status Field to Order Model
        Create Migration
        Update Admin Dashboard
        Add Staff-Side Status Update View (Optional)
        Show Status on Receipt & Confirmation
        Auto-Update Order Status from Payment Logs
            Add Signal to Monitor PaymentLog
    Customer Portal
        Add View for Logged-In Users
        Create Dashboard Template
        Order Filtering & Search
            Add Filter Form to Dashboard
        Product Thumbnails in Order History
            Show Images for Each Item
        Support Request Button
            Add “Need Help?” Button per Order
    Analytics & Reporting

FIX: Fixed the DOB issue at the signup page , but not the google sign up

Step 1: Create Profile Edit Form
Step 2: Add Profile Edit View
Step 3: Add URL Route
Step 4: Create Template

FEAT: Added a Logout Button.
    Step 1: Add Logout URL
    Step 2: Add Logout Button to Navbar or Sidebar
    Step 3: Redirect After Logout (Optional)
        LOGOUT_REDIRECT_URL = '/'

Phase 8 Overview: Staff Tools & Fulfillment
    Step 1: Staff Access Control
    Step 2: Staff Order Dashboard
    Step 3: Payment Verification Panel
    Step 4: Support Request Inbox
    
    Delivery Tracking
        Extended the order model to accomodate delivery Tracking
        Add Staff Update View
        add delivery status tracking and staff update view
    
    Export Reports for Staff
        Add CSV Export View, URL and added the link button in staff orders template

    Role-Based Dashboards (Youth Labs vs Admin)
        Add Role Field to User Model
        Add Role-Based Routing

    Enable Role Selection During Signup & Admin
        Add Role to Signup Form
        Add Role to Admin Panel

    Branded /staff Landing Page with Quick Links

    Delivery Map + SMS Notification for Shipped Orders
        Add Location Fields to Order Model
        Add SMS Notification Hook
        Embed Map in Receipt or Dashboard
        

